name: Build, Release and Publish to PyPI

on:
  workflow_dispatch:
    inputs:
      additional:
        description: 'Additional information to add about this release'
        required: false
        default: ''
      contributors:
        description: 'Contributors for this release'
        required: false
        default: ''

permissions:
  contents: write

jobs:
  build:
    name: Build distro
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.read_version.outputs.version }}

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install pypa/build
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install build --user

      - name: Read release version
        id: read_version
        run: |
          VERSION=$(python3 -c 'import src.Patcher.__about__ as about; print(about.__version__)')
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
        env:
          VERSION: ${{ stes.read_version.outputs.version }}

      - name: Build binary wheel and source tarball
        run: python3 -m build

      - name: Store distribution package
        uses: actions/upload-artifact@v3
        with:
          name: patcher-${{ steps.read_version.outputs.version }}
          path: dist/

  publish-to-pypi:
    name: Publish distro to PyPI
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/patcherctl
    permissions:
      id-token: write

    steps:
      - name: Download all the things
        uses: actions/download-artifact@v3
        with:
          name: patcher-${{ needs.build.outputs.version }}
          path: dist/

      - name: Publish distribution package to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}

  github-release:
    name: Sign python distro and upload to GitHub Release
    needs: publish-to-pypi
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write

    steps:
      - name: Download all the things...again
        uses: actions/download-artifact@v3
        with:
          name: patcher-${{ needs.build.outputs.version }}
          path: dist/

      - name: Sign distribution packages
        uses: sigstore/gh-action-sigstore-python@v2.1.1
        with:
          inputs: |
            ./dist/*.tar.gz
            ./dist/*.whl

      - name: Generate changelog
        id: changelog
        uses: metcalfc/changelog-generator@v4.3.1
        with:
          myToken: ${{ secrets.GITHUB_TOKEN }}
          reverse: 'true'

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2.0.4
        with:
          name: Patcher ${{ needs.build.outputs.version }}
          tag_name: v${{ needs.build.outputs.version }}
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}
          body: |
            This release has been automatically generated by a GitHub Action.

            ## Additional info
            ${{ github.event.inputs.additional }}

            ## Installation Instructions
            #### Beginning with version 1.3.1, Patcher can now be installed via `pip`:
            `python3 -m pip install patcherctl`

            For detailed installation instructions, please refer to the [Wiki](https://github.com/liquidz00/Patcher/wiki#installation) or the [README](https://github.com/liquidz00/Patcher/blob/main/README.md)

            ### Contributors
            ${{ github.event.inputs.contributors }}

            ## Release notes
            ${{ steps.changelog.outputs.changelog }}

      - name: Install GitHub CLI
        run: sudo apt-get install gh

      - name: Upload artifact signatures to Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload
          'v${{ needs.build.outputs.version }}' dist/**
          --repo '${{ github.repository }}'

